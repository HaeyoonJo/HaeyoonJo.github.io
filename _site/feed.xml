<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2020-07-25T20:18:36+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">맥주연구하는 엔지니어의 기술 블로그</title><subtitle>A blog about DevOps, AWS, automation as well as deliver my experiences in both S.Korea and Israel.</subtitle><entry><title type="html">[Terraform] 기본 개념 간략한 정리</title><link href="http://0.0.0.0:4000/blog/2020/05/31/terraform-conception-brief-note.html" rel="alternate" type="text/html" title="[Terraform] 기본 개념 간략한 정리" /><published>2020-05-31T18:47:00+00:00</published><updated>2020-05-31T18:47:00+00:00</updated><id>http://0.0.0.0:4000/blog/2020/05/31/terraform-conception-brief-note-</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2020/05/31/terraform-conception-brief-note.html">&lt;p&gt;해당 페이지에 기재된 내용이 어느 블로그 내용에서 나온거 같다면 알려주세용.&lt;/p&gt;

&lt;p&gt;제가 공부할 때 노트에 적고 묵히고 묵혀두다가 블로그에 정리하는 편이라&lt;/p&gt;

&lt;p&gt;&lt;del&gt;출처가 어딘지 자세히 기억이 나지 않을 때가..&lt;/del&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기본개념 정리&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Providers: 테라폼으로 정의할 인프라 제공자를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resource : 실제로 생성할 인프라 자원을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Output: 인프라를 provision한 후, 생성된 자원의 특정 값을 output으로 출력 지정 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backend: Terraform의 상태를 저장할 공간을 지정할 수 있다.&lt;/p&gt;

    &lt;p&gt;( * BeNX는 S3를 기본적으로 사용 - 송주영님의 온라인  meetup에서 - )&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Module: 공통적으로 활용할 수 있는 인프라 코드를 한 곳으로 모아 정의.  module 사용시, 변수만 바꾸어 동일한 리소스를 쉽게 생성이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remote state: VPC, IAM과 같이 여러 서비스가 공통적으로 사용중인 리소스들을 공유하여 provisioning이 가능하다. tfstate파일이 저장되어 있는 backend 정보를 명시하면, terraform이 해당 backend에서   output 정보들을 가져온다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Terraform 실행 순서&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IAM에서 aws-cli 실행가능한 권한이 주어진 사용자 생성해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;terraform init: 해당 디렉토리에서 terraform initialization하면 terraform은 프로젝트에 적합한 providers plugin을 설치한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;terraform plan: .tf 파일에 명시된 리소스 추가 및 변경사항 프로세스 리뷰가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;terraform apply: 실제 리소스들을 생성하는 과정으로 실제 배포환경과 비교된 변경내용을 반영한다&lt;/p&gt;

    &lt;p&gt;변경된 내용은 state파일에 작성되며, apply 실행 전에 실행계획을 보여준다.&lt;/p&gt;

    &lt;p&gt;이 때 출력형식은 git diff와 같이 +, -로 추가/수정 및 삭제 여부를 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;terraform show: 해당 프로젝트에서 관리중인 provisioned 인프라 상태를 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음글에서는 tfstate파일이 무엇인지, 어떻게 관리를 해야하는지 알아보자&lt;/p&gt;</content><author><name></name></author><category term="devops" /><category term="terraform" /><summary type="html">해당 페이지에 기재된 내용이 어느 블로그 내용에서 나온거 같다면 알려주세용.</summary></entry><entry><title type="html">[Terraform] 개념이해편, 테라폼이 뭐니?</title><link href="http://0.0.0.0:4000/blog/2020/05/29/what-is-terraform.html" rel="alternate" type="text/html" title="[Terraform] 개념이해편, 테라폼이 뭐니?" /><published>2020-05-29T11:47:24+00:00</published><updated>2020-05-29T11:47:24+00:00</updated><id>http://0.0.0.0:4000/blog/2020/05/29/what-is-terraform</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2020/05/29/what-is-terraform.html">&lt;h1 id=&quot;terraform-개념이해편&quot;&gt;Terraform 개념이해편&lt;/h1&gt;

&lt;p&gt;1년전부터 테라폼의 매력을 느껴 해봐야지 해봐야지 하면서, 간단히 이해만 하고 실무에서는 아직 사용할 일이 없어 거의 손놓고 있었다.
2020년 5월 7일, DevOps 송주영님의 온라인 테라폼 강의를 듣고나서 다시 한번 시작해보자는 마음을 먹게 되어 이렇게 문서로 정리하게 되었다. 서울에서 근무할 당시, 시간날때마다 송주영님의 강의를 찾아 다녔었는데, 개인적으로 기술을 바라보는 그분의 철학을 존경하고 나의 롤모델이다.
핸즈온으로 사용한 코드 또한 송주영님의 &lt;a href=&quot;https://github.com/jupitersong/aws-provisioning&quot;&gt;github: aws-provisioning&lt;/a&gt;에서 많이 참고했다.&lt;/p&gt;

&lt;h3 id=&quot;1-terraform-도커-컨테이너에서-실행&quot;&gt;1. Terraform 도커 컨테이너에서 실행&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;Dockerfile&quot;&gt;도커파일&lt;/a&gt; 작성 및 이미지 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t haeyoon/terraform:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;** HashiCorp에서 제공하는 공식 &lt;a href=&quot;https://hub.docker.com/r/hashicorp/terraform/&quot;&gt;Terraform 도커이미지&lt;/a&gt;를 사용해도 된다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컨테이너 접속 및 테라폼으로 인프라 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it -d \
    -v $(pwd):/home/terraform/ \
    --name tfserver \
    haeyoon/terraform:latest

$ docker exec -it tfserver /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;**attach로 접속하거나 exec명령어로 컨테이너 안에서 명령어를 실행하게도 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;2-terraform&quot;&gt;2. Terraform&lt;/h3&gt;

&lt;p&gt;Terraform은 Infrastructure as Code(IAC)를 기반으로 HashiCorp에서 제공하는 도구이다. 먼저, IAC를 이해해보자.&lt;/p&gt;

&lt;h5 id=&quot;infrastructure-as-codeiac란&quot;&gt;Infrastructure as Code(IAC)란?&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AWS를 예를 들면, 콘솔과 같은 사용자 인터페이스에서 수동으로 구성 및 관리하는 프로세스와 인프라 구성값들을 지정된 파일형식에 맞춰 코드화하고 작성된 파일들로 특정 도구를 통해 인프라 리소스가 생성, 변경 및 관리되도록 한 개념으로서, 리소스들은 해당 인프라 내의 가상머신, 보안그룹, 네트워크 인터페이스등이 포함된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IAC의 장점&lt;/strong&gt;
(*일부 영어번역은 직역이 아닌, 내 생각을 녹여서 번역을 했다)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;easily repeatable ( 반복가능한 코드 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;easily readable ( 가독 및 쉬운 이해 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;operational certainty with “terraform plan” ( terraform plan을 통해 예측가능한 운영확실성 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;standardized environment builds ( 표준화된 환경 구축 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;quickly provisioned development environment ( 신속하게 프로비저닝되는 인프라 환경 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;disaster recovery ( 재해 발생시 빠른 복구 가능 )&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;DevOps 도구들을 사용하다보면 인프라에 대한 인식이 변화되면서 인프라 장애시 전통적인 방법처럼 오류를 찾아 수정하는 것이 아니라 이전버전으로 롤백을 한다거나 배포방식 -Blue/green, canary-적용와 같이 필요할 땐 쓰고 바로 버리는 추세와 Immutable infrastructure를 추구하는데, IAC 또한 그러하다는 시각으로 바라보고 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;terraform이란&quot;&gt;Terraform이란?&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;HashiCorp에서는 Terraform을 안전하고 반복가능한 방식으로 인프라를 구축, 변경 및 관리하기 위한 도구로 정의하고 있으며, aws CloudFormation와 함께 대표적인 IAC도구로 사용되고 있다.
Terraform은 providers의 인프라나 서비스(리소스)들을 코드로 관리할 수 있도록 하므로 providers로 정의된 aws, gcp, azure, github, docker etc가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HashiCorp에서 정의한 Terraform 장점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Terraform 장점&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Platform Agnostic ( 하나의 플랫폼에만 구애받지 않고 여러 플랫폼에서 동일하게 실행이 가능 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;State management ( State file로 인프라 상태를 비교 및 확인하여 관리 )&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Operator confidence ( terraform apply할 때, 사용자 또는 운영자는 변경/추가 사항을 미리 검토하고 실행할 수 있으므로 안정적, 신뢰성의 특징을 가지며 검토단계에서 오류가 있으면, 제안된 plan을 적용하지 않을 수도 있다 )&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HCL ( HashiCorp Configuration Language )
  HCL은 HashiCorp의 제품에서 사용,인간과 기계 모두에게 친숙하게 느껴질 수 있도록 작성되었으며 JSON과 호환되므로 Terraform과 다른시스템의 호환이 가능하다.
  ( * HCL에 대해서는 추후 재 정리할 예정 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;테라폼에서 일부 중요한 용어들을 살펴보자. HashiCorp의 &lt;a href=&quot;https://www.terraform.io/docs/glossary.html#policy&quot;&gt;Terraform Glossary&lt;/a&gt;페이지에 간략한 설명과 함께 해당 용어 문서로 링크가 되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Providers
  HashiCorp는 Providers를 테라폼과 API 상호작용을 통해 리소스를 제공하는 플러그인으로 정의하고 있다. 즉, 특정 인프라 제공자의 리소스 생성 및 관리를 위해 응답가능한 서비스들을 의미하며, 해당 제공자와 Terraform은 API를 통한 상호작용을 한다. 단일 provider뿐 아니라 복수 providers ( Multi providers ) 제공도 가능한데 예를 들면, AWS EC2 인스턴스 ID를 DataDog 모니터링 값으로 전달할 수 있다.
  &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;Providers 문서&lt;/a&gt;를 보면, Providers로써 사용가능한 서비스 목록을 확인가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Resources
  리소스 블록은 인프라를 정의한다. 블록이 뭘까? HashiCorp 공식문서를 읽어보면 리소스는 하나이상의 인프라 객체들을 명시한 블록이라고 했는데 아래의 VPC 리소스 블록을 살펴보자.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # vpc
  resource &quot;aws_vpc&quot; &quot;default&quot; {
    cidr_block       = &quot;10.0.0.0/16&quot;
    instance_tenancy = &quot;default&quot;

    tags = {
      Name = &quot;vpc-${var.vpc_name}&quot;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;VPC 리소스 블록을 2가지 요소(resource type, resource name)로 정의를 하였다. 추가설명으로, 리소스 블록에서 EC2 인스턴스와 같은 물리적 요소 또는 Heroku Application과 같은 논리적 요소를 정의할 수 있다.&lt;/p&gt;

    &lt;p&gt;__자원유형( aws_vpc )__과 __자원이름( default )__를 명시했으며, 자원유형은 Terraform에서 지정한 유형을 사용해야 하고 자원이름은 자유롭게 네이밍이 가능하다. 이를 통해 VPC 생성, 수정 및 관리할 리소스를 정의하였다.&lt;/p&gt;

    &lt;p&gt;리소스에 대한 __인자( Argument )__는 블록 내에 저장된다. 위의 예시와 같이, CIDR_BLOCK 범위 지정, 테넌시 명시, 태그를 명시하거나 또는 EC2와 같이 머신 크기, 이미지 종류, VPC ID와 같이 리소스 구성을 명시할 수 있다. 해당 리소스 블록과 인자들에 대한 문서는 Terraform의 각 리소스 문서에 명시되어 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modules&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input variables&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Interpolation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고
&lt;a href=&quot;https://www.linode.com/docs/applications/configuration-management/introduction-to-hcl/#:~:text=HCL%20is%20a%20configuration%20language,both%20human%20and%20machine%20friendly&quot;&gt;inctoduction to HCL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.hashicorp.com/terraform?track=getting-started#getting-started&quot;&gt;terraform practice&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="devops" /><category term="terraform" /><summary type="html">Terraform 개념이해편</summary></entry></feed>